// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uiprdzdskaqakfwhzssc.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVpcHJkemRza2FxYWtmd2h6c3NjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI2NTMyMzIsImV4cCI6MjA2ODIyOTIzMn0.FCQX8C1q0QpFl_jKXYNN94rO67QIqmXkY1L4FnrniG8";

// Global flag to prevent multiple GoTrueClient instances
let isClientInitialized = false;

// Create a singleton client to prevent multiple GoTrueClient instances
let clientInstance: ReturnType<typeof createClient<Database>> | null = null;

export const supabase = (() => {
  if (!clientInstance) {
    // Prevent multiple GoTrueClient instances
    if (isClientInitialized) {
      console.warn('Supabase client already initialized, returning existing instance');
    }
    
    clientInstance = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
        storageKey: 'retail-lead-compass-auth-unique',
        // Add timeout for auth operations
        flowType: 'pkce'
      },
      db: {
        schema: 'public'
      },
      global: {
        headers: {
          'X-Client-Info': 'retail-lead-compass-client-unique'
        },
        // Add fetch configuration with timeout and DNS fallback
        fetch: (url, options = {}) => {
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout
          
          return fetch(url, {
            ...options,
            signal: controller.signal,
          }).catch((error) => {
            // Handle DNS resolution errors
            if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
              console.error('DNS resolution failed for Supabase URL:', url);
              throw new Error('Unable to connect to the server. Please check your internet connection or try using a VPN if you\'re in a restricted region.');
            }
            throw error;
          }).finally(() => {
            clearTimeout(timeoutId);
          });
        }
      },
      // Add realtime configuration
      realtime: {
        params: {
          eventsPerSecond: 10
        }
      }
    });
    
    isClientInitialized = true;
  }
  return clientInstance;
})();

// Connection health check utility
export const checkConnectionHealth = async (): Promise<{ healthy: boolean; latency?: number; error?: string; diagnostic?: any }> => {
  const startTime = Date.now();
  try {
    const { error } = await supabase
      .from('profiles')
      .select('count')
      .limit(1)
      .abortSignal(AbortSignal.timeout(10000)); // 10 second timeout for health check
    
    const latency = Date.now() - startTime;
    
    if (error) {
      return { healthy: false, latency, error: error.message };
    }
    
    return { healthy: true, latency };
  } catch (error) {
    const latency = Date.now() - startTime;
    
    // If it's a DNS/network error, run diagnostics
    if (error instanceof Error && 
        (error.message.includes('Failed to fetch') || 
         error.message.includes('ERR_NAME_NOT_RESOLVED'))) {
      
      try {
        const { runConnectionDiagnostics } = await import('@/utils/connectionDiagnostics');
        const diagnostic = await runConnectionDiagnostics();
        
        return { 
          healthy: false, 
          latency, 
          error: 'DNS resolution failed. Please check your internet connection or try using a VPN.',
          diagnostic
        };
      } catch (diagError) {
        console.warn('Failed to run connection diagnostics:', diagError);
      }
    }
    
    return { 
      healthy: false, 
      latency, 
      error: error instanceof Error ? error.message : 'Unknown error' 
    };
  }
};

// Retry wrapper for database operations
export const withRetry = async <T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  delay: number = 1000
): Promise<T> => {
  let lastError: Error;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error instanceof Error ? error : new Error('Unknown error');
      
      // Don't retry on auth errors or validation errors
      if (lastError.message.includes('Invalid login credentials') || 
          lastError.message.includes('validation') ||
          lastError.message.includes('duplicate key')) {
        throw lastError;
      }
      
      if (attempt === maxRetries) {
        throw lastError;
      }
      
      // Exponential backoff
      const waitTime = delay * Math.pow(2, attempt - 1);
      console.warn(`Database operation failed (attempt ${attempt}/${maxRetries}), retrying in ${waitTime}ms:`, lastError.message);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
  
  throw lastError!;
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";